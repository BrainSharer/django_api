# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
#THIS_DIR = os.path.dirname(__file__)
#PROJECT_DIR = os.path.join(THIS_DIR, 'relative/path/to/your/project/')
#sys.path.append(PROJECT_DIR)

import os
import sys
from pathlib import Path
ROOT = Path(__file__).parents[2]
#ROOT = Path.joinpath(ROOT, "src")
sys.path.append(ROOT.as_posix())
print(ROOT)
#sys.exit()
os.environ['DJANGO_SETTINGS_MODULE'] = 'brainsharer.documentation_settings'
import django
import inspect
django.setup()


try:
  from skimage import io
except ImportError:
  print("oh no 2")


# -- Project information -----------------------------------------------------

project = 'Brainsharer database portal'
copyright = 'Kleinfeld UCSD/Princeton Labs'
author = 'Edward O\'Donnell'

# The short X.Y version
version = '1.0'
# The full version, including alpha/beta/rc tags
release = '1.0'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.githubpages',
]
autodoc_mock_imports = ["scipy",]


# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'
# Syntax highlighting of code blocks

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'emacs'


# -- Options for HTML output -------------------------------------------------
html_theme = 'sphinx_rtd_theme'
html_static_path = ['_static']
html_logo = "_static/250.png"
html_theme_options = {
    'logo_only': True,
    'display_version': False,
    # Toc options
    'collapse_navigation': True,
    'titles_only': True
}

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}
html_css_files = ['custom.css',]


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Brainsharerportaldoc'


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

def process_docstring(app, what, name, obj, options, lines):
    # This causes import errors if left outside the function
    from django.db import models

    # Only look at objects that inherit from Django's base model class
    if inspect.isclass(obj) and issubclass(obj, models.Model):
        # Grab the field list from the meta class
        fields = obj._meta.fields

        for field in fields:
            # Decode and strip any html out of the field's help text
            #help_text = strip_tags(field.help_text)
            db_column = field.db_column
            line = ""

            # Decode and capitalize the verbose name, for use if there isn't
            # any help text
            verbose_name = field.verbose_name
            max_length = field.max_length

            """
            if help_text:
                # Add the model field to the end of the docstring as a param
                # using the help text as the description
                line = u':param %s: %s' % (field.attname, help_text)
                lines.append(line)
            else:
                # Add the model field to the end of the docstring as a param
                # using the verbose name as the description
                line = u':param %s: %s' % (field.attname, verbose_name)
                lines.append(line)

            """
            #line = u':param %s: %s' % (field.attname, verbose_name)
            #line += u':type %s: %s' % (field.attname, type(field).__name__)
            #line = f':param {field.attname}:'
            #lines.append(line)
            field_type = (type(field).__name__).replace('Field','')
            if max_length and (field_type == 'Char' or field_type == 'Text'):
                field_type += f' length={max_length}'
            line = f':type {field.attname}: {field_type}'
            
            # Add the model field to the end of the docstring as a param
            # using the verbose name as the description
            if db_column:
                verbose_name = 'DB column = ' + db_column
            
            lines.append(u':param %s: %s' % (field.attname, verbose_name))
            # Add the field's type to the docstring
            lines.append(u':type %s: %s' % (field.attname, field_type))



            


            # Add the field's type to the docstring
    # Return the extended docstring
    return lines


def setup(app):
    # Register the docstring processor with sphinx
    app.connect('autodoc-process-docstring', process_docstring)